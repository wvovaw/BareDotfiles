set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner
# Origin https://github.com/cirala/lfimg
# Dependencies:
#    ffmpegthumbnailer
#    ImageMagick
#    poppler
#    epub-thumbnailer
#    bc
#    bat (optional - color highlight for text files)
#    chafa (optional - for image preview over SSH)
#    unzip (optional - for .zip and .jar files)
#    7z (optional - for .7z files)
#    unrar (optional - for .rar files)
#    catdoc (optional - for .doc files)
#    docx2txt (optional - for .docx files)
#    odt2txt (optional - for .odt and *.ods files)
#    exiftool (optional - for music files)
#    iso-info (optional - for .iso files)
#    transmission (optional - for .torrent files)
#

# Basic Settings
set ratios 1:2:3
set preview true
set hidden true
set drawbox true
set icons true
set ignorecase true

# Custom Functions
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        video/*|image/*/application/pdf) gio open "$f";;
        *) gio open "$f" ;;
    esac
}}

cmd mkdir ${{
  printf " Directory Name: "
  read ans
  mkdir $ans
}}

cmd touch ${{
  printf "ﱐ File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "﫥bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done
  
  lf -remote 'send reload'
}}

cmd stouch ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd setwallpaper %feh --bg-scale "$f"

# cmd fzf_jump ${{
#   res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
#   if [ -f "$res" ]; then
#     cmd="select"
#   elif [ -d "$res" ]; then
#     cmd="cd"
#   fi
#   lf -remote "send $id $cmd \"$res\""
# }}

cmd dragon %dragon -a -x $fx   # drag and drop selected file(s) and exit
cmd dragon-stay %dragon -a $fx # drag and drop selected file(s) and stay

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.7z)  unzip "$f" ;;
      *.rar) unrar "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd stripspace %stripspace "$f"

# Autojump binding
cmd go %lf -remote "send $id cd '$(autojump $1)'"

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f

# File Openers
map ee $$EDITOR "$f"
map ec %code-oss "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab tarbz
map au unarchive

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

# Dragon Mapping
map dr dragon

# Autojump Mapping
map a push :aj<space>

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map <enter> open
map t touch
map st stouch
map md mkdir
map ch chmod
map bg setwallpaper
map r rename
map gg top
map G bottom
map R reload
map C clear
map U unselect

# Movement
map gtr cd ~/.local/share/Trash/files
map gus cd /run/media/wvovaw
map gm cd ~/Music
map gp cd ~/Pictures
map gv cd ~/Videos
map gd cd ~/Downloads
map gD cd ~/Documents
map gs cd ~/Scripts
map gS cd ~/Sources
map gc cd ~/.config
